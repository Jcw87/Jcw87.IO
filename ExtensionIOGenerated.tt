<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new List<string>
    {
        "Int16",
        "Int32",
        "Int64",
        "UInt16",
        "UInt32",
        "UInt64",
        "Single",
        "Double",
    };
#>
using System;
using System.IO;

namespace Jcw87.IO
{
    internal static class BitConverter2
    {
<# foreach (var type in types) { #>
        public unsafe static void GetBytes(<#=type#> value, byte[] buffer, int offset)
        {
            if (buffer == null) throw new ArgumentNullException(nameof(buffer));
            if (offset < 0) throw new ArgumentOutOfRangeException(nameof(offset));
            if (buffer.Length - offset < sizeof(<#=type#>)) throw new ArgumentException();

            fixed (byte* b = &buffer[offset]) *((<#=type#>*)b) = value;
        }

<#}#>
    }

    public static class ExtensionIOGenerated
    {
<# foreach (var type in types) { #>
        public static <#=type#> Read<#=type#>LE(this byte[] bytes, int offset)
        {
            var data = bytes.ReadBytes(offset, sizeof(<#=type#>));
            if (!BitConverter.IsLittleEndian) Array.Reverse(data);
            return BitConverter.To<#=type#>(data, 0);
        }

        public static <#=type#> Read<#=type#>BE(this byte[] bytes, int offset)
        {
            var data = bytes.ReadBytes(offset, sizeof(<#=type#>));
            if (BitConverter.IsLittleEndian) Array.Reverse(data);
            return BitConverter.To<#=type#>(data, 0);
        }

        public static void WriteLE(this byte[] bytes, int offset, <#=type#> value)
        {
            BitConverter2.GetBytes(value, bytes, offset);
            if (!BitConverter.IsLittleEndian) Array.Reverse(bytes, offset, sizeof(<#=type#>));
        }

        public static void WriteBE(this byte[] bytes, int offset, <#=type#> value)
        {
            BitConverter2.GetBytes(value, bytes, offset);
            if (BitConverter.IsLittleEndian) Array.Reverse(bytes, offset, sizeof(<#=type#>));
        }

        public static <#=type#> Read<#=type#>LE(this Stream stream)
        {
            var bytes = new byte[sizeof(<#=type#>)];
            stream.Read(bytes, 0, sizeof(<#=type#>));
            if (!BitConverter.IsLittleEndian) Array.Reverse(bytes);
            return BitConverter.To<#=type#>(bytes, 0);
        }

        public static <#=type#> Read<#=type#>BE(this Stream stream)
        {
            var bytes = new byte[sizeof(<#=type#>)];
            stream.Read(bytes, 0, sizeof(<#=type#>));
            if (BitConverter.IsLittleEndian) Array.Reverse(bytes);
            return BitConverter.To<#=type#>(bytes, 0);
        }

        public static void WriteLE(this Stream stream, <#=type#> value)
        {
            var bytes = BitConverter.GetBytes(value);
            if (!BitConverter.IsLittleEndian) Array.Reverse(bytes);
            stream.Write(bytes, 0, bytes.Length);
        }

        public static void WriteBE(this Stream stream, <#=type#> value)
        {
            var bytes = BitConverter.GetBytes(value);
            if (BitConverter.IsLittleEndian) Array.Reverse(bytes);
            stream.Write(bytes, 0, bytes.Length);
        }

<#}#>
    }

    public partial class BinaryReaderEndian
    {
<# foreach (var type in types) {#>
        public override <#=type#> Read<#=type#>()
        {
            BaseStream.Read(m_buffer2, 0, sizeof(<#=type#>));
            if (!m_nativeEndian) Array.Reverse(m_buffer2, 0, sizeof(<#=type#>));
            return BitConverter.To<#=type#>(m_buffer2, 0);
        }

<#}#>
    }

    public partial class BinaryWriterEndian
    {
<# foreach (var type in types) {#>
        public override void Write(<#=type#> value)
        {
            BitConverter2.GetBytes(value, m_buffer2, 0);
            if (!m_nativeEndian) Array.Reverse(m_buffer2, 0, sizeof(<#=type#>));
            BaseStream.Write(m_buffer2, 0, sizeof(<#=type#>));
        }
<#}#>
    }
}